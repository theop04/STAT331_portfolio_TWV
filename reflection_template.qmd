---
title: "STAT 331 Portfolio"
author: "Theodore Weicker"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1

# Lab 3 Question 2

teacher_evals <- read_csv(here::here("Week 3", "Lab 3","teacher_evals.csv"))

```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2

# REVISED: changed from full path to relative path

# Lab 2 Question 1

surveys <- read_csv(here::here("Week 2", "Lab 2","surveys.csv"))

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

# PA-4

military <- read_xlsx("gov_spending_per_capita.xlsx",
                      sheet = "Share of Govt. spending",
                      skip  = 7,
                      n_max = 191,
                      na = c(". .", "xxx", "..")
                      )

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1

# Lab 3 Question 5

teacher_evals_clean  <- teacher_evals |>
  rename(sex = gender) |>
    filter(no_participants >= 10) |>
      mutate(
        teacher_id  = as.character(teacher_id),
        question_no = as.character(question_no)
      ) |>
        select(course_id, teacher_id, question_no, no_participants, resp_share,    SET_score_avg, percent_failed_cur, academic_degree, seniority, sex) 

```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

# Challenge 4 Table

# REVISED: combined the two mutate functions in the end into one (added the rounding step into the same mutate as the new columns)

ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  pivot_longer(
    cols = c(center_cost, family_cost, median_income),
    names_to = "Type",
    values_to = "value"
  ) |> 
  pivot_wider(names_from = study_year, values_from = value) |> 
  mutate(
    Type = recode(Type,
                      "center_cost" = "Center-based Cost",
                      "family_cost" = "Family-based Cost",
                      "median_income" = "Household Income"),
    `Absolute Change` = `2018` - `2008`,
    `Percent Change` = (`Absolute Change` / `2008`) * 100,
    across(-Type, round, 2)
  ) |>
    kable()

```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3

# Lab 4 Question 7

# REVISED: changed to using fct_reorder2 instead of hardcoding the order of the legend. Also changed to case_when from recode.

mcsa_plot_data <- ca_childcare |>
  select(c("census_region", "study_year", "mc_infant", "mc_toddler", "mc_preschool")) |>
    pivot_longer(
      cols = starts_with("mc_"),
      names_to = "baby_type",
      values_to = "cost"
    ) |>
      mutate(
        baby_type = case_when(
          baby_type == "mc_infant" ~ "Infant",
          baby_type == "mc_toddler" ~ "Toddler",
          baby_type == "mc_preschool" ~ "Preschool"
        ), 
        fct_relevel(baby_type, "Infant", "Toddler", "Preschool"),
        census_region = fct_reorder2(census_region, study_year, cost, .desc = TRUE)
      )

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1

# Lab 3 Question 5

teacher_evals_clean  <- teacher_evals |>
  rename(sex = gender) |>
    filter(no_participants >= 10) |>
      mutate(
        teacher_id  = as.character(teacher_id),
        question_no = as.character(question_no)
      ) |>
        select(course_id, teacher_id, question_no, no_participants, resp_share, SET_score_avg, percent_failed_cur, academic_degree, seniority, sex) 

```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-2

# Challenge 4 Table

# REVISED: combined the two mutate functions in the end into one (added the rounding step into the same mutate as the new columns)

ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  pivot_longer(
    cols = c(center_cost, family_cost, median_income),
    names_to = "Type",
    values_to = "value"
  ) |> 
  pivot_wider(names_from = study_year, values_from = value) |> 
  mutate(
    Type = recode(Type,
                      "center_cost" = "Center-based Cost",
                      "family_cost" = "Family-based Cost",
                      "median_income" = "Household Income"),
    `Absolute Change` = `2018` - `2008`,
    `Percent Change` = (`Absolute Change` / `2008`) * 100,
    across(-Type, round, 2)
  ) |>
    kable()

```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character

# REVISED: combined slice_min and slice_max into one function

# Lab 3 Question 12

teacher_evals_clean |>
  filter(academic_degree %in% c("dr","prof"))|>
    group_by(teacher_id) |>
      summarize(
        mean_resp_share = mean(resp_share, na.rm = TRUE),
        degree = first(academic_degree),
        seniority = first(seniority),
        sex = first(sex)
      ) |>
        slice(c(which.min(mean_resp_share), which.max(mean_resp_share)))


```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# Lab 5 Witness 2

person_interview |>
  filter(address_street_name == "Franklin Ave" & str_detect(name, "Annabel")) |>
    kable()

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

# Lab 5 Mastermind filter

facebook_event_checkin |>
  filter(
    event_name == "SQL Symphony Concert",
    ymd(date) %within% interval(ymd("2017-12-01"), ymd("2017-12-31"))
  ) |>
  count(person_id, name = "visits") |>
  filter(visits >= 3) |>
  inner_join(person, by = c("person_id" = "id")) |>
  inner_join(drivers_license, by = c("license_id" = "id")) |>
  filter(hair_color == "red", height >= 65, height <= 67) |>
  kable()

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1

# Challenge 4 Table

# REVISED: combined the two mutate functions in the end into one (added the rounding step into the same mutate as the new columns)

ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  pivot_longer(
    cols = c(center_cost, family_cost, median_income),
    names_to = "Type",
    values_to = "value"
  ) |> 
  pivot_wider(names_from = study_year, values_from = value) |> 
  mutate(
    Type = recode(Type,
                      "center_cost" = "Center-based Cost",
                      "family_cost" = "Family-based Cost",
                      "median_income" = "Household Income"),
    `Absolute Change` = `2018` - `2008`,
    `Percent Change` = (`Absolute Change` / `2008`) * 100,
    across(-Type, round, 2)
  ) |>
    kable()

```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

# Challenge 4 Data Description 

ca_normalized <- ca_childcare |> 
  mutate(
    center_norm = center_cost / base_values$center_cost * 100,
    family_norm = family_cost / base_values$family_cost * 100,
    income_norm = median_income / base_values$median_income * 100
  ) |> 
  pivot_longer(
    cols = ends_with("_norm"),
    names_to = "Type",
    values_to = "value"
  ) |> 
  mutate(
    Type = recode(Type,
                      "center_norm" = "Center-based Cost",
                      "family_norm" = "Family-based Cost",
                      "income_norm" = "Household Income")
  ) 

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1

# Lab 4 Question 7

# REVISED: changed to using fct_reorder2 instead of hardcoding the order of the legend. Also changed to case_when from recode.

mcsa_plot_data <- ca_childcare |>
  select(c("census_region", "study_year", "mc_infant", "mc_toddler", "mc_preschool")) |>
    pivot_longer(
      cols = starts_with("mc_"),
      names_to = "baby_type",
      values_to = "cost"
    ) |>
      mutate(
        baby_type = case_when(
          baby_type == "mc_infant" ~ "Infant",
          baby_type == "mc_toddler" ~ "Toddler",
          baby_type == "mc_preschool" ~ "Preschool"
        ), 
        fct_relevel(baby_type, "Infant", "Toddler", "Preschool"),
        census_region = fct_reorder2(census_region, study_year, cost, .desc = TRUE)
      )

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

# Lab 4 Question 7

# REVISED: changed to using fct_reorder2 instead of hardcoding the order of the legend. Also changed to case_when from recode.

mcsa_plot_data <- ca_childcare |>
  select(c("census_region", "study_year", "mc_infant", "mc_toddler", "mc_preschool")) |>
    pivot_longer(
      cols = starts_with("mc_"),
      names_to = "baby_type",
      values_to = "cost"
    ) |>
      mutate(
        baby_type = case_when(
          baby_type == "mc_infant" ~ "Infant",
          baby_type == "mc_toddler" ~ "Toddler",
          baby_type == "mc_preschool" ~ "Preschool"
        ), 
        fct_relevel(baby_type, "Infant", "Toddler", "Preschool"),
        census_region = fct_reorder2(census_region, study_year, cost, .desc = TRUE)
      )

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

# REVISED: changed into using only one mutate function

# Lab 4 Question 4

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County"),
         census_region = fct_collapse(
          fct(county_name),
          "Superior California" = superior_counties,
          "North Coast" = north_coast_counties,
          "San Francisco Bay Area" = san_fran_counties,
          "Northern San Joaquin Valley" = n_san_joaquin_counties,
          "Central Coast" = central_coast_counties,
          "Southern San Joaquin Valley" = s_san_joaquin_counties,
          "Inland Empire" = inland_counties,
          "Los Angeles County" = la_county,
          "Orange County" = orange_county,
          "San Diego-Imperial" = san_diego_imperial_counties
          )
        )

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

# REVISED: converted to lubridate format from stadard integer date

# Lab 5 filtering

crime_scene_report |>
  mutate(date = ymd(date)) |>
    filter(month(date) == 1, year(date) == 2018, day(date) == 15, type == "murder", city == "SQL City") |>
      kable()

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1

# Lab 4 Question 2

ca_childcare <- ca_childcare |>
  left_join(y = tax_rev,
             by = join_by(county_name == entity_name, study_year == year))

```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

# Lab 5 (this is changed from the code below -- I switched it from a left join to right join, simply by switching the order of the dataset and the "by" argument)

person_interview <- interview |>
  right_join(person, by = c("person_id" = "id"))

```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

# Lab 5 Adding interviews

person_interview <- person |>
  left_join(interview, by = c("id" = "person_id"))

```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

# Lab 5 Mastermind filter

facebook_event_checkin |>
  filter(
    event_name == "SQL Symphony Concert",
    ymd(date) %within% interval(ymd("2017-12-01"), ymd("2017-12-31"))
  ) |>
  count(person_id, name = "visits") |>
  filter(visits >= 3) |>
  inner_join(person, by = c("person_id" = "id")) |>
  inner_join(drivers_license, by = c("license_id" = "id")) |>
  filter(hair_color == "red", height >= 65, height <= 67) |>
  kable()


```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

# Lab 5 getting the killer's transcript

interview |>
  inner_join(filter(person, name == "Jeremy Bowers"), by = c("person_id" = "id")) |>
  select(transcript) |> 
    kable()

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

# Lab 5 filtering join

# Revised: changed from 

gym_member_full <- get_fit_now_member |>
  filter(membership_status == "gold") |>
  semi_join(
    get_fit_now_check_in |> filter(check_in_date == 20180109),
    by = c("id" = "membership_id")
  )

gym_member_full |>
  kable()

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

# Note: this was not used in any of the labs, but one potential way to use anti_join is highlighted below. The new dataset would contain  people with gym access who weren’t questioned by police, which potentially could be useful in another investigation.

gym_no_interview <- get_fit_now_member |>
  anti_join(interview, by = c("id" = "person_id"))

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

# Challenge 4 Table

# REVISED: combined the two mutate functions in the end into one (added the rounding step into the same mutate as the new columns)

ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  pivot_longer(
    cols = c(center_cost, family_cost, median_income),
    names_to = "Type",
    values_to = "value"
  ) |> 
  pivot_wider(names_from = study_year, values_from = value) |> 
  mutate(
    Type = recode(Type,
                      "center_cost" = "Center-based Cost",
                      "family_cost" = "Family-based Cost",
                      "median_income" = "Household Income"),
    `Absolute Change` = `2018` - `2008`,
    `Percent Change` = (`Absolute Change` / `2008`) * 100,
    across(-Type, round, 2)
  ) |>
    kable()

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

# Challenge 4 Table

# REVISED: combined the two mutate functions in the end into one (added the rounding step into the same mutate as the new columns)

ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  pivot_longer(
    cols = c(center_cost, family_cost, median_income),
    names_to = "Type",
    values_to = "value"
  ) |> 
  pivot_wider(names_from = study_year, values_from = value) |> 
  mutate(
    Type = recode(Type,
                      "center_cost" = "Center-based Cost",
                      "family_cost" = "Family-based Cost",
                      "median_income" = "Household Income"),
    `Absolute Change` = `2018` - `2008`,
    `Percent Change` = (`Absolute Change` / `2008`) * 100,
    across(-Type, round, 2)
  ) |>
    kable()

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Lab 4
-   Challenge 4
-   Challenge 3
-   Lab 2
-   Challenge 1
-   Challenge 2

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

# Lab 2 Questions 10-13

ggplot(data = surveys,
       mapping = aes(x = species, y = weight)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(alpha = 0.5, color = "orange3") +
  labs(x = "Rodent Species", 
       y = "Weight (grams)",
        title = "Distribution of Rodent Weights by Species") +
  theme(axis.text.x = element_text(angle = 45))


```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

# Lab 2 Questions 10-13

ggplot(data = surveys,
       mapping = aes(x = species, y = weight)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(alpha = 0.5, color = "orange3") +
  labs(x = "Rodent Species", 
       y = "Weight (grams)",
        title = "Distribution of Rodent Weights by Species") +
  theme(axis.text.x = element_text(angle = 45))

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num

# Lab 2 Question 4

ggplot(data = surveys,
       mapping = aes(x = weight, y = hindfoot_length)) +
  geom_point(alpha = 0.5) +
  facet_wrap(~species, scales = "free")  +
  labs(x = "Weight (grams)", 
       y = "", 
       title = "Relationship between Hindfoot Length and Weight for Rodents",
       subtitle = "Hindfoot Length (millimeters)")

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

# Lab 2 Questions 10-13

ggplot(data = surveys,
       mapping = aes(x = species, y = weight)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(alpha = 0.5, color = "orange3") +
  labs(x = "Rodent Species", 
       y = "Weight (grams)",
        title = "Distribution of Rodent Weights by Species") +
  theme(axis.text.x = element_text(angle = 45))

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

# Challenge 3 Question 2

# REVISED: changed colors into Valkyries' official team colors :) and used labels_percent instead of percent_format

ggplot(data = teacher_evals_compare,
       mapping = aes(x = sen_level, fill = set_level)) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::label_percent()) +
  scale_fill_manual(values = c(
    "excellent" = "#AD96DC",
    "standard" = "#B9975B"   
  )) +
  labs(x = "Years of Experience", 
       y = "",
       title = "Evaluation of Teachers' Use of Activities",
       fill = "Evaluation Rating") +
  theme_bw() +
  theme(legend.position = "top")

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

# Challenge 4 Plot

# REVISED: added a horizontal line to highlight the normalization baseline

ggplot(ca_normalized, aes(x = study_year, y = value, color = Type)) +
  geom_line(size = 1.2) +
  geom_hline(yintercept = 100, linetype = "dotted", color = "gray40", size = 1) +
  geom_point(size = 2) +
  scale_y_continuous(labels = scales::label_number(accuracy = 1)) +
  scale_x_continuous(breaks = 2008:2018) +
  scale_color_manual(values = c(
    "Center-based Cost" = "#1B9E77",  
    "Family-based Cost" = "#7570B3",
    "Household Income" = "#E7298A"  
  )) +
  labs(
    title = "Growth of Childcare Costs vs Household Income in California (2008–2018)",
    subtitle = paste0("Values normalized to ", base_year, " levels"),
    x = "Year",
    y = "Value (Index, 2008 = 100)",
    color = "Type"
  ) +
  theme_bw() +
  theme(
    plot.subtitle = element_text(size = 11),
    legend.position = "bottom"
  )

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1

# Lab 4 Question 7

mcsa_plot_data |> ggplot(mapping = aes(x = study_year,
                                       y = cost,
                                       color = census_region)) +
  geom_point() + 
  geom_smooth() +
  facet_wrap( ~ baby_type) + 
  scale_x_continuous(
    breaks = seq(2008, 2018, by = 2),                        minor_breaks = 2008:2018,
  ) +
  coord_cartesian(ylim = c(100, 500)) +
  scale_color_manual(values = region_colors) +
  labs(
    x = "Study Year",
    y = "",
    title = "Weekly Median Price for Center-Based Childcare ($)",
    color = "California Region"
  ) +
  theme_bw()  +
  theme(
    legend.key.size = unit(0.9, "lines"),
    legend.text = element_text(size = 8),
    legend.title = element_text(size = 10),
    plot.title = element_text(size = 10),
    panel.spacing = unit(0.7, "lines")
  )

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

# Challenge 4 Plot

# REVISED: added a horizontal line to highlight the normalization baseline

ggplot(ca_normalized, aes(x = study_year, y = value, color = Type)) +
  geom_line(size = 1.2) +
  geom_hline(yintercept = 100, linetype = "dotted", color = "gray40", size = 1) +
  geom_point(size = 2) +
  scale_y_continuous(labels = scales::label_number(accuracy = 1)) +
  scale_x_continuous(breaks = 2008:2018) +
  scale_color_manual(values = c(
    "Center-based Cost" = "#1B9E77",  
    "Family-based Cost" = "#7570B3",
    "Household Income" = "#E7298A"  
  )) +
  labs(
    title = "Growth of Childcare Costs vs Household Income in California (2008–2018)",
    subtitle = paste0("Values normalized to ", base_year, " levels"),
    x = "Year",
    y = "Value (Index, 2008 = 100)",
    color = "Type"
  ) +
  theme_bw() +
  theme(
    plot.subtitle = element_text(size = 11),
    legend.position = "bottom"
  )

```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

# Lab 2 Question 4

ggplot(data = surveys,
       mapping = aes(x = weight, y = hindfoot_length)) +
  geom_point(alpha = 0.5) +
  facet_wrap(~species, scales = "free")  +
  labs(x = "Weight (grams)", 
       y = "", 
       title = "Relationship between Hindfoot Length and Weight for Rodents",
       subtitle = "Hindfoot Length (millimeters)")

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

# Lab 4 Question 7

mcsa_plot_data |> ggplot(mapping = aes(x = study_year,
                                       y = cost,
                                       color = census_region)) +
  geom_point() + 
  geom_smooth() +
  facet_wrap( ~ baby_type) + 
  scale_x_continuous(
    breaks = seq(2008, 2018, by = 2),                        minor_breaks = 2008:2018,
  ) +
  coord_cartesian(ylim = c(100, 500)) +
  scale_color_manual(values = region_colors) +
  labs(
    x = "Study Year",
    y = "",
    title = "Weekly Median Price for Center-Based Childcare ($)",
    color = "California Region"
  ) +
  theme_bw()  +
  theme(
    legend.key.size = unit(0.9, "lines"),
    legend.text = element_text(size = 8),
    legend.title = element_text(size = 10),
    plot.title = element_text(size = 10),
    panel.spacing = unit(0.7, "lines")
  )

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

# Lab 4 Question 7

# REVISED: changed to using fct_reorder2 instead of hardcoding the order of the legend. Also changed to case_when from recode.

mcsa_plot_data <- ca_childcare |>
  select(c("census_region", "study_year", "mc_infant", "mc_toddler", "mc_preschool")) |>
    pivot_longer(
      cols = starts_with("mc_"),
      names_to = "baby_type",
      values_to = "cost"
    ) |>
      mutate(
        baby_type = case_when(
          baby_type == "mc_infant" ~ "Infant",
          baby_type == "mc_toddler" ~ "Toddler",
          baby_type == "mc_preschool" ~ "Preschool"
        ), 
        fct_relevel(baby_type, "Infant", "Toddler", "Preschool"),
        census_region = fct_reorder2(census_region, study_year, cost, .desc = TRUE)
      )

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

# Challenge 4 Plot

# REVISED: added a horizontal line to highlight the normalization baseline

ggplot(ca_normalized, aes(x = study_year, y = value, color = Type)) +
  geom_line(size = 1.2) +
  geom_hline(yintercept = 100, linetype = "dotted", color = "gray40", size = 1) +
  geom_point(size = 2) +
  scale_y_continuous(labels = scales::label_number(accuracy = 1)) +
  scale_x_continuous(breaks = 2008:2018) +
  scale_color_manual(values = c(
    "Center-based Cost" = "#1B9E77",  
    "Family-based Cost" = "#7570B3",
    "Household Income" = "#E7298A"  
  )) +
  labs(
    title = "Growth of Childcare Costs vs Household Income in California (2008–2018)",
    subtitle = paste0("Values normalized to ", base_year, " levels"),
    x = "Year",
    y = "Value (Index, 2008 = 100)",
    color = "Type"
  ) +
  theme_bw() +
  theme(
    plot.subtitle = element_text(size = 11),
    legend.position = "bottom"
  )

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

# Lab 4 Question 7

region_colors <- colorRampPalette(brewer.pal(7, "Accent"))(10)


mcsa_plot_data |> ggplot(mapping = aes(x = study_year,
                                       y = cost,
                                       color = census_region)) +
  geom_point() + 
  geom_smooth() +
  facet_wrap( ~ baby_type) + 
  scale_x_continuous(
    breaks = seq(2008, 2018, by = 2),                          minor_breaks = 2008:2018,
  ) +
  coord_cartesian(ylim = c(100, 500)) +
  scale_color_manual(values = region_colors) +
  labs(
    x = "Study Year",
    y = "",
    title = "Weekly Median Price for Center-Based Childcare ($)",
    color = "California Region"
  ) +
  theme_bw()  +
  theme(
    legend.key.size = unit(0.9, "lines"),
    legend.text = element_text(size = 8),
    legend.title = element_text(size = 10),
    plot.title = element_text(size = 10),
    panel.spacing = unit(0.7, "lines")
  )

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

# Challenge 4 Plot

# REVISED: added geom_text to my plot to highlight the final normalized values of each of the three categories.

ggplot(ca_normalized, aes(x = study_year, y = value, color = Type)) +
  geom_line(size = 1.2) +
  geom_hline(yintercept = 100, linetype = "dotted", color = "gray40", size = 1) +
  geom_point(size = 2) +
  geom_text(
  data = ca_normalized |> group_by(Type) |> slice_max(study_year),
  aes(label = round(value, 1)),
  hjust = -0.2,
  vjust = 0.5,
  show.legend = FALSE
) +
  scale_y_continuous(labels = scales::label_number(accuracy = 1)) +
  scale_x_continuous(breaks = 2008:2018, limits = c(2008, 2019)) +
  scale_color_manual(values = c(
    "Center-based Cost" = "#1B9E77",  
    "Family-based Cost" = "#7570B3",
    "Household Income" = "#E7298A"  
  )) +
  labs(
    title = "Growth of Childcare Costs vs Household Income in California (2008–2018)",
    subtitle = paste0("Values normalized to ", base_year, " levels"),
    x = "Year",
    y = "Value (Index, 2008 = 100)",
    color = "Type"
  ) +
  theme_bw() +
  theme(
    plot.subtitle = element_text(size = 11),
    legend.position = "bottom"
  )

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

# Challenge 4 Plot

# REVISED: added a horizontal line to highlight the normalization baseline

ggplot(ca_normalized, aes(x = study_year, y = value, color = Type)) +
  geom_line(size = 1.2) +
  geom_hline(yintercept = 100, linetype = "dotted", color = "gray40", size = 1) +
  geom_point(size = 2) +
  scale_y_continuous(labels = scales::label_number(accuracy = 1)) +
  scale_x_continuous(breaks = 2008:2018) +
  scale_color_manual(values = c(
    "Center-based Cost" = "#1B9E77",  
    "Family-based Cost" = "#7570B3",
    "Household Income" = "#E7298A"  
  )) +
  labs(
    title = "Growth of Childcare Costs vs Household Income in California (2008–2018)",
    subtitle = paste0("Values normalized to ", base_year, " levels"),
    x = "Year",
    y = "Value (Index, 2008 = 100)",
    color = "Type"
  ) +
  theme_bw() +
  theme(
    plot.subtitle = element_text(size = 11),
    legend.position = "bottom"
  )

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

# REVISED: combined slice_min and slice_max into one function

# Lab 3 Question 12

teacher_evals_clean |>
  filter(academic_degree %in% c("dr","prof"))|>
    group_by(teacher_id) |>
      summarize(
        mean_resp_share = mean(resp_share, na.rm = TRUE),
        degree = first(academic_degree),
        seniority = first(seniority),
        sex = first(sex)
      ) |>
        slice(c(which.min(mean_resp_share), which.max(mean_resp_share)))

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

# Challenge 4 Table

# REVISED: combined the two mutate functions in the end into one (added the rounding step into the same mutate as the new columns)

ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  pivot_longer(
    cols = c(center_cost, family_cost, median_income),
    names_to = "Type",
    values_to = "value"
  ) |> 
  pivot_wider(names_from = study_year, values_from = value) |> 
  mutate(
    Type = recode(Type,
                      "center_cost" = "Center-based Cost",
                      "family_cost" = "Family-based Cost",
                      "median_income" = "Household Income"),
    `Absolute Change` = `2018` - `2008`,
    `Percent Change` = (`Absolute Change` / `2008`) * 100,
    across(-Type, round, 2)
  ) |>
    kable()

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

# Challenge 4 Table

# REVISED: combined the two mutate functions in the end into one (added the rounding step into the same mutate as the new columns)

ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  pivot_longer(
    cols = c(center_cost, family_cost, median_income),
    names_to = "Type",
    values_to = "value"
  ) |> 
  pivot_wider(names_from = study_year, values_from = value) |> 
  mutate(
    Type = recode(Type,
                      "center_cost" = "Center-based Cost",
                      "family_cost" = "Family-based Cost",
                      "median_income" = "Household Income"),
    `Absolute Change` = `2018` - `2008`,
    `Percent Change` = (`Absolute Change` / `2008`) * 100,
    across(-Type, round, 2)
  ) |>
    kable()

```

-   Example 2

```{r}
#| label: dvs-5-2

# Lab 3 Question 9

teacher_evals_clean |>
  group_by(teacher_id, course_id) |>
    summarize(num_q = n_distinct(question_no)) |>
      filter(num_q == 9) |>
        nrow()

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

# Challenge 4 Table

# REVISED: combined the two mutate functions in the end into one (added the rounding step into the same mutate as the new columns). Also changed the column names.


ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  pivot_longer(
    cols = c(center_cost, family_cost, median_income),
    names_to = "Type",
    values_to = "value"
  ) |> 
  pivot_wider(names_from = study_year, values_from = value) |> 
  mutate(
    Type = recode(Type,
                      "center_cost" = "Center-based Cost",
                      "family_cost" = "Family-based Cost",
                      "median_income" = "Household Income"),
    `Absolute Change` = `2018` - `2008`,
    `Percent Change` = (`Absolute Change` / `2008`) * 100,
    across(-Type, round, 2)
  ) |>
    kable(col.names = c("Type", "2008 Value", "2018 Value", "Absolute Change", "Percent Change"))

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

# Challenge 4 Table

# REVISED: combined the two mutate functions in the end into one (added the rounding step into the same mutate as the new columns). Also changed the column names.


ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  pivot_longer(
    cols = c(center_cost, family_cost, median_income),
    names_to = "Type",
    values_to = "value"
  ) |> 
  pivot_wider(names_from = study_year, values_from = value) |> 
  mutate(
    Type = recode(Type,
                      "center_cost" = "Center-based Cost",
                      "family_cost" = "Family-based Cost",
                      "median_income" = "Household Income"),
    `Absolute Change` = `2018` - `2008`,
    `Percent Change` = (`Absolute Change` / `2008`) * 100,
    across(-Type, round, 2)
  ) |>
    kable(col.names = c("Type", "2008 Value", "2018 Value", "Absolute Change", "Percent Change"))

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

# Challenge 4 Table

# REVISED: combined the two mutate functions in the end into one (added the rounding step into the same mutate as the new columns)


ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  pivot_longer(
    cols = c(center_cost, family_cost, median_income),
    names_to = "Type",
    values_to = "value"
  ) |> 
  pivot_wider(names_from = study_year, values_from = value) |> 
  mutate(
    Type = recode(Type,
                      "center_cost" = "Center-based Cost",
                      "family_cost" = "Family-based Cost",
                      "median_income" = "Household Income"),
    `Absolute Change` = `2018` - `2008`,
    `Percent Change` = (`Absolute Change` / `2008`) * 100,
    across(-Type, round, 2)
  ) |>
    kable(col.names = c("Type", "2008 Value", "2018 Value", "Absolute Change", "Percent Change"))
```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

# Challenge 4 Table

# REVISED: combined the two mutate functions in the end into one (added the rounding step into the same mutate as the new columns)

ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  pivot_longer(
    cols = c(center_cost, family_cost, median_income),
    names_to = "Type",
    values_to = "value"
  ) |> 
  pivot_wider(names_from = study_year, values_from = value) |> 
  mutate(
    Type = recode(Type,
                      "center_cost" = "Center-based Cost",
                      "family_cost" = "Family-based Cost",
                      "median_income" = "Household Income"),
    `Absolute Change` = `2018` - `2008`,
    `Percent Change` = (`Absolute Change` / `2008`) * 100,
    across(-Type, round, 2)
  ) |>
    kable()

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

# Challenge 4 Table

# REVISED: combined the two mutate functions in the end into one (added the rounding step into the same mutate as the new columns)

ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  pivot_longer(
    cols = c(center_cost, family_cost, median_income),
    names_to = "Type",
    values_to = "value"
  ) |> 
  pivot_wider(names_from = study_year, values_from = value) |> 
  mutate(
    Type = recode(Type,
                      "center_cost" = "Center-based Cost",
                      "family_cost" = "Family-based Cost",
                      "median_income" = "Household Income"),
    `Absolute Change` = `2018` - `2008`,
    `Percent Change` = (`Absolute Change` / `2008`) * 100,
    across(-Type, round, 2)
  ) |>
    kable()

```

-   using `across()`

```{r}
#| label: pe-1-across

# Challenge 4 Table

# REVISED: combined the two mutate functions in the end into one (added the rounding step into the same mutate as the new columns)

ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  pivot_longer(
    cols = c(center_cost, family_cost, median_income),
    names_to = "Type",
    values_to = "value"
  ) |> 
  pivot_wider(names_from = study_year, values_from = value) |> 
  mutate(
    Type = recode(Type,
                      "center_cost" = "Center-based Cost",
                      "family_cost" = "Family-based Cost",
                      "median_income" = "Household Income"),
    `Absolute Change` = `2018` - `2008`,
    `Percent Change` = (`Absolute Change` / `2008`) * 100,
    across(-Type, round, 2)
  ) |>
    kable()

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

# Challenge 4 Table

# REVISED: combined the two mutate functions in the end into one (added the rounding step into the same mutate as the new columns)

ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  pivot_longer(
    cols = c(center_cost, family_cost, median_income),
    names_to = "Type",
    values_to = "value"
  ) |> 
  pivot_wider(names_from = study_year, values_from = value) |> 
  mutate(
    Type = recode(Type,
                      "center_cost" = "Center-based Cost",
                      "family_cost" = "Family-based Cost",
                      "median_income" = "Household Income"),
    `Absolute Change` = `2018` - `2008`,
    `Percent Change` = (`Absolute Change` / `2008`) * 100,
    across(-Type, round, 2)
  ) |>
    kable()

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

# Challenge 3 Question 2

# REVISED: changed colors into Valkyries' official team colors :) and used labels_percent instead of percent_format

ggplot(data = teacher_evals_compare,
       mapping = aes(x = sen_level, fill = set_level)) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::label_percent()) + #note: I used label_percent instead of percent_format
  scale_fill_manual(values = c(
    "excellent" = "#AD96DC",  
    "standard" = "#B9975B"  
  )) +
  labs(x = "Years of Experience", 
       y = "",
       title = "Evaluation of Teachers' Use of Activities",
       fill = "Evaluation Rating") +
  theme_bw() +
  theme(legend.position = "top")

```

-   I can connect a data wranglingg pipeline into a `ggplot()`

```{r}
#| label: pe-4-2g

# Challenge 4 Plot

# REVISED: combined the two mutate functions in the end into one (added the rounding step into the same mutate as the new columns) and piped the dataset directly into ggplot for clarity

ca_childcare |> 
  mutate(
    center_norm = center_cost / base_values$center_cost * 100,
    family_norm = family_cost / base_values$family_cost * 100,
    income_norm = median_income / base_values$median_income * 100
  ) |> 
  pivot_longer(
    cols = ends_with("_norm"),
    names_to = "Type",
    values_to = "value"
  ) |> 
  mutate(
    Type = recode(Type,
                      "center_norm" = "Center-based Cost",
                      "family_norm" = "Family-based Cost",
                      "income_norm" = "Household Income")
  ) |>
    ggplot(aes(x = study_year, y = value, color = Type)) +
    geom_line(size = 1.2) +
    geom_hline(yintercept = 100, linetype = "dotted", color = "gray40", size = 1) +
    geom_point(size = 2) +
    scale_y_continuous(labels = scales::label_number(accuracy = 1)) +
    scale_x_continuous(breaks = 2008:2018) +
    scale_color_manual(values = c(
      "Center-based Cost" = "#1B9E77",  
      "Family-based Cost" = "#7570B3",
      "Household Income" = "#E7298A"  
    )) +
    labs(
      title = "Growth of Childcare Costs vs Household Income in California (2008–2018)",
      subtitle = paste0("Values normalized to ", base_year, " levels"),
      x = "Year",
      y = "Value (Index, 2008 = 100)",
      color = "Type"
    ) +
    theme_bw() +
    theme(
      plot.subtitle = element_text(size = 11),
      legend.position = "bottom"
    )
  
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

# Lab 1 T-Test (Q10)

t.test(len ~ supp, data = ToothGrowth)

```

-   Example 2

```{r}
#| label: dsm-2-2

# Lab 2 Question 17

species_mod <- aov(weight ~ species, data = surveys)

summary(species_mod)

```

-   Example 3

```{r}
#| label: dsm-2-3

# Challenge 3 Question 3

chisq.test( teacher_evals_compare$set_level, teacher_evals_compare$sen_level)
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

Throughout the course, whenever I received a "Growing" on a Lab or Challenge ( and it was not a trivial error) I went back and reflected on what I could have done better, and changed the code, and wrote out a short blurb on what I fixed and why. In all the examples where I revised a code chunk, either submitting an assignment for additional feedback, or simply changing it for the portfolio, I made sure to highlight the changes and any growing points that were not implied. Revising my mistakes helped me revisit areas that I was still improving on, further helping my overall learning.

## Extending My Thinking

<!-- How did you extend your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? Be specific -->

In every assignment, for each question, I made sure to build a mental roadmap of a potential pipeline that would solve the problem as efficiently as possible. I made sure to always go above and beyond on the challenges, especially the ones that were open to interpretation, like challenge 2 and challenge 4 (receiving exemplary challenges for both). My favorite example was challenge 4, as I tried to make a realistic and professional report, answering a research question I was genuinely interested in, and in the end, came to a very interesting conclusion through both my table and graph.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

Every week, one of the assignments I would spend the most time on was the peer reviews, as I enjoyed reading other people's reports, giving feedback, and also learning things from my peers. One example of a peer review I liked was for Lab 3:\
\
"You did a really nice job writing efficient dplyr pipelines throughout the lab, and your code gets the job done cleanly. One small thing that could make it even easier to read is adding a little more spacing around logical expressions in Q5 (and a few others) and indenting each function call consistently (ie Q7).\

I really like your use of kable() to make the tables look professional. Just a reminder that the variable should be referenced as sex instead of gender to match the cleaned dataset in the desc (Q7).\

I like that you included the reference for the grouping functions in Q9, which makes your thought process clear.\

Your use of slice() to pull the min and max values in Q10 and Q11 was very elegant. One thing to watch for is that there might be multiple instructors tied for the top or bottom values (for Q10 I think there were more than one teacher with a perfect rating and for Q11, I think there were multiple teachers with fail rate of 0), so including all tied cases would make the results more complete.\

Overall, your report is very nicely formatted, with a sleek layout and thoughtful use of packages. The minor spacing and formatting tweaks above are just small stylistic points; overall great job!!"

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

Throughout the pair-programming practice activities, I always followed the guidelines and rules two distinct roles. When I was the typer, I made sure to only listen to my peer, asking clarifying questions when needed. When my partner was the typer, I tried to express my thoughts in a way that was as unambiguous as possible.

Both of these were difficult to do initially, as I had to hold myself back from coding the solution that I had thought of, as well as explaining my thoughts verbally as code. Especially the first one was difficult, as I am used to working independently on coding assignments in my other classes, but I also think that is where I grew the most. Frequently, my peer would have a different approach to the problem, and more often than not it would work, and I would learn something new.
